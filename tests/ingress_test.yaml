suite: test ingress template
templates:
  - ingress.yaml
tests:
  - it: should not create ingress when disabled
    set:
      ingress:
        enabled: false
    asserts:
      - hasDocuments:
          count: 0

  - it: should create ingress when enabled
    set:
      ingress:
        enabled: true
        className: alb
        loadBalancer:
          enabled: true
          host: test.example.com
          path: /
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Ingress
      - equal:
          path: metadata.name
          value: RELEASE-NAME-iap-ingress

  - it: should have correct API version and kind
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: true
          host: test.example.com
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - equal:
          path: apiVersion
          value: networking.k8s.io/v1
      - equal:
          path: kind
          value: Ingress

  - it: should include labels from helper function
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: true
          host: test.example.com
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - exists:
          path: metadata.labels
      - exists:
          path: metadata.labels["app.kubernetes.io/name"]
      - exists:
          path: metadata.labels["app.kubernetes.io/instance"]

  - it: should include annotations when provided
    set:
      ingress:
        enabled: true
        annotations:
          alb.ingress.kubernetes.io/scheme: internet-facing
          alb.ingress.kubernetes.io/target-type: ip
          custom.annotation/test: "value"
        loadBalancer:
          enabled: true
          host: test.example.com
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/scheme"]
          value: internet-facing
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/target-type"]
          value: ip
      - equal:
          path: metadata.annotations["custom.annotation/test"]
          value: "value"

  - it: should set ingressClassName when provided
    set:
      ingress:
        enabled: true
        className: alb
        loadBalancer:
          enabled: true
          host: test.example.com
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - equal:
          path: spec.ingressClassName
          value: alb

### TLS Tests
  - it: should include TLS configuration when provided
    set:
      ingress:
        enabled: true
        tls:
          - secretName: test-tls-secret
            hosts:
              - test.example.com
              - api.example.com
          - secretName: another-tls-secret
            hosts:
              - another.example.com
        loadBalancer:
          enabled: true
          host: test.example.com
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - exists:
          path: spec.tls
      - lengthEqual:
          path: spec.tls
          count: 2
      - equal:
          path: spec.tls[0].secretName
          value: test-tls-secret
      - contains:
          path: spec.tls[0].hosts
          content: test.example.com
      - contains:
          path: spec.tls[0].hosts
          content: api.example.com
      - equal:
          path: spec.tls[1].secretName
          value: another-tls-secret
      - contains:
          path: spec.tls[1].hosts
          content: another.example.com

  - it: should not include TLS when not provided
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: true
          host: test.example.com
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - notExists:
          path: spec.tls

  - it: should handle single TLS configuration
    set:
      ingress:
        enabled: true
        tls:
          - secretName: single-tls-secret
            hosts:
              - single.example.com
        loadBalancer:
          enabled: true
          host: test.example.com
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - exists:
          path: spec.tls
      - lengthEqual:
          path: spec.tls
          count: 1
      - equal:
          path: spec.tls[0].secretName
          value: single-tls-secret
      - lengthEqual:
          path: spec.tls[0].hosts
          count: 1
      - equal:
          path: spec.tls[0].hosts[0]
          value: single.example.com

### Load balancer tests
  - it: should create load balancer rule when enabled
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: true
          host: lb.example.com
          path: /
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - lengthEqual:
          path: spec.rules
          count: 1
      - equal:
          path: spec.rules[0].host
          value: lb.example.com
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: /
      - equal:
          path: spec.rules[0].http.paths[0].pathType
          value: Prefix
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 443

  - it: should not create load balancer rule when disabled
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: false
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - lengthEqual:
          path: spec.rules
          count: 0

  - it: should use custom path for load balancer
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: true
          host: lb.example.com
          path: /api
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: /api

  - it: should use default path when not specified
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: true
          host: lb.example.com
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: /

  - it: should use custom pathType
    set:
      ingress:
        enabled: true
        pathType: Exact
        loadBalancer:
          enabled: true
          host: lb.example.com
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].pathType
          value: Exact

  - it: should use default pathType when not specified
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: true
          host: lb.example.com
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].pathType
          value: Prefix

  - it: should use correct service port
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: true
          host: lb.example.com
        directAccess:
          enabled: false
      service:
        port: 8080
      replicaCount: 3
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 8080

#### Direct Access
  - it: should create direct access rules when enabled
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: false
        directAccess:
          enabled: true
          baseDomain: example.com
          path: /
      service:
        port: 443
      replicaCount: 3
    asserts:
      - lengthEqual:
          path: spec.rules
          count: 3
      - equal:
          path: spec.rules[0].host
          value: iap-NAMESPACE-0.example.com
      - equal:
          path: spec.rules[1].host
          value: iap-NAMESPACE-1.example.com
      - equal:
          path: spec.rules[2].host
          value: iap-NAMESPACE-2.example.com

  - it: should not create direct access rules when disabled
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: false
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - lengthEqual:
          path: spec.rules
          count: 0

  - it: should create correct service references for direct access
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: false
        directAccess:
          enabled: true
          baseDomain: example.com
      service:
        port: 443
      replicaCount: 3
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service-headless-0
      - equal:
          path: spec.rules[1].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service-headless-1
      - equal:
          path: spec.rules[2].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service-headless-2

  - it: should use correct ports for direct access
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: false
        directAccess:
          enabled: true
          baseDomain: example.com
      service:
        port: 8080
      replicaCount: 2
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 8080
      - equal:
          path: spec.rules[1].http.paths[0].backend.service.port.number
          value: 8080

  - it: should use custom path for direct access
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: false
        directAccess:
          enabled: true
          baseDomain: example.com
          path: /api
      service:
        port: 443
      replicaCount: 2
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: /api
      - equal:
          path: spec.rules[1].http.paths[0].path
          value: /api

  - it: should use default path when not specified for direct access
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: false
        directAccess:
          enabled: true
          baseDomain: example.com
      service:
        port: 443
      replicaCount: 2
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: /
      - equal:
          path: spec.rules[1].http.paths[0].path
          value: /

  - it: should handle single replica for direct access
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: false
        directAccess:
          enabled: true
          baseDomain: example.com
      service:
        port: 443
      replicaCount: 1
    asserts:
      - lengthEqual:
          path: spec.rules
          count: 1
      - equal:
          path: spec.rules[0].host
          value: iap-NAMESPACE-0.example.com
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service-headless-0

  - it: should handle large replica count for direct access
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: false
        directAccess:
          enabled: true
          baseDomain: example.com
      service:
        port: 443
      replicaCount: 5
    asserts:
      - lengthEqual:
          path: spec.rules
          count: 5
      - equal:
          path: spec.rules[0].host
          value: iap-NAMESPACE-0.example.com
      - equal:
          path: spec.rules[4].host
          value: iap-NAMESPACE-4.example.com
      - equal:
          path: spec.rules[4].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service-headless-4

  - it: should handle zero replicas for direct access
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: false
        directAccess:
          enabled: true
          baseDomain: example.com
      service:
        port: 443
      replicaCount: 0
    asserts:
      - lengthEqual:
          path: spec.rules
          count: 0

### Combination tests
  - it: should create both load balancer and direct access rules
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: true
          host: lb.example.com
          path: /
        directAccess:
          enabled: true
          baseDomain: example.com
          path: /
      service:
        port: 443
      replicaCount: 3
    asserts:
      - lengthEqual:
          path: spec.rules
          count: 4  # 1 load balancer + 3 direct access
      # Load balancer rule
      - equal:
          path: spec.rules[0].host
          value: lb.example.com
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service
      # Direct access rules
      - equal:
          path: spec.rules[1].host
          value: iap-NAMESPACE-0.example.com
      - equal:
          path: spec.rules[1].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service-headless-0
      - equal:
          path: spec.rules[2].host
          value: iap-NAMESPACE-1.example.com
      - equal:
          path: spec.rules[2].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service-headless-1
      - equal:
          path: spec.rules[3].host
          value: iap-NAMESPACE-2.example.com
      - equal:
          path: spec.rules[3].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service-headless-2

  - it: should handle different paths for load balancer and direct access
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: true
          host: lb.example.com
          path: /api
        directAccess:
          enabled: true
          baseDomain: example.com
          path: /direct
      service:
        port: 443
      replicaCount: 2
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: /api
      - equal:
          path: spec.rules[1].http.paths[0].path
          value: /direct
      - equal:
          path: spec.rules[2].http.paths[0].path
          value: /direct

  - it: should work with complete configuration including TLS
    set:
      ingress:
        enabled: true
        className: alb
        pathType: Prefix
        annotations:
          alb.ingress.kubernetes.io/scheme: internet-facing
          alb.ingress.kubernetes.io/target-type: ip
        tls:
          - secretName: example-tls
            hosts:
              - lb.example.com
              - iap-0.example.com
              - iap-1.example.com
        loadBalancer:
          enabled: true
          host: lb.example.com
          path: /
        directAccess:
          enabled: true
          baseDomain: example.com
          path: /
      service:
        port: 443
      replicaCount: 2
    asserts:
      - equal:
          path: spec.ingressClassName
          value: alb
      - exists:
          path: metadata.annotations
      - exists:
          path: spec.tls
      - lengthEqual:
          path: spec.rules
          count: 3
      - equal:
          path: spec.rules[0].host
          value: lb.example.com
      - equal:
          path: spec.rules[1].host
          value: iap-NAMESPACE-0.example.com
      - equal:
          path: spec.rules[2].host
          value: iap-NAMESPACE-1.example.com

  - it: should handle load balancer only configuration
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: true
          host: lb.example.com
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 3
    asserts:
      - lengthEqual:
          path: spec.rules
          count: 1
      - equal:
          path: spec.rules[0].host
          value: lb.example.com
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service

  - it: should handle direct access only configuration
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: false
        directAccess:
          enabled: true
          baseDomain: example.com
      service:
        port: 443
      replicaCount: 2
    asserts:
      - lengthEqual:
          path: spec.rules
          count: 2
      - equal:
          path: spec.rules[0].host
          value: iap-NAMESPACE-0.example.com
      - equal:
          path: spec.rules[1].host
          value: iap-NAMESPACE-1.example.com
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service-headless-0
      - equal:
          path: spec.rules[1].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service-headless-1

### Edge cases
  - it: should handle string replica count
    set:
      ingress:
        enabled: true
        directAccess:
          enabled: true
          baseDomain: example.com
        loadBalancer:
          enabled: false
      service:
        port: 443
      replicaCount: "3"
    asserts:
      - lengthEqual:
          path: spec.rules
          count: 3
      - equal:
          path: spec.rules[0].host
          value: iap-NAMESPACE-0.example.com
      - equal:
          path: spec.rules[2].host
          value: iap-NAMESPACE-2.example.com

  - it: should handle complex base domain
    set:
      ingress:
        enabled: true
        directAccess:
          enabled: true
          baseDomain: subdomain.example.com
        loadBalancer:
          enabled: false
      service:
        port: 443
      replicaCount: 2
    asserts:
      - equal:
          path: spec.rules[0].host
          value: iap-NAMESPACE-0.subdomain.example.com
      - equal:
          path: spec.rules[1].host
          value: iap-NAMESPACE-1.subdomain.example.com

  - it: should handle complex annotations
    set:
      ingress:
        enabled: true
        annotations:
          alb.ingress.kubernetes.io/backend-protocol: HTTPS
          alb.ingress.kubernetes.io/healthcheck-path: /health
          alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
          external-dns.alpha.kubernetes.io/hostname: test.example.com,api.example.com
        loadBalancer:
          enabled: true
          host: test.example.com
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 1
    asserts:
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/backend-protocol"]
          value: HTTPS
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/healthcheck-path"]
          value: /health
      - equal:
          path: metadata.annotations["alb.ingress.kubernetes.io/listen-ports"]
          value: '[{"HTTPS": 443}]'
      - equal:
          path: metadata.annotations["external-dns.alpha.kubernetes.io/hostname"]
          value: test.example.com,api.example.com

  - it: should handle multiple TLS configurations with many hosts
    set:
      ingress:
        enabled: true
        tls:
          - secretName: wildcard-tls
            hosts:
              - "*.example.com"
              - example.com
          - secretName: specific-tls
            hosts:
              - api.example.com
              - app.example.com
              - admin.example.com
        loadBalancer:
          enabled: true
          host: api.example.com
        directAccess:
          enabled: false
      service:
        port: 443
      replicaCount: 1
    asserts:
      - lengthEqual:
          path: spec.tls
          count: 2
      - lengthEqual:
          path: spec.tls[0].hosts
          count: 2
      - lengthEqual:
          path: spec.tls[1].hosts
          count: 3
      - contains:
          path: spec.tls[0].hosts
          content: "*.example.com"
      - contains:
          path: spec.tls[1].hosts
          content: admin.example.com

  - it: should handle different pathTypes for different rules
    set:
      ingress:
        enabled: true
        pathType: Exact
        loadBalancer:
          enabled: true
          host: lb.example.com
        directAccess:
          enabled: true
          baseDomain: example.com
      service:
        port: 443
      replicaCount: 2
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].pathType
          value: Exact
      - equal:
          path: spec.rules[1].http.paths[0].pathType
          value: Exact
      - equal:
          path: spec.rules[2].http.paths[0].pathType
          value: Exact

  - it: should handle high replica count
    set:
      ingress:
        enabled: true
        directAccess:
          enabled: true
          baseDomain: example.com
        loadBalancer:
          enabled: false
      service:
        port: 443
      replicaCount: 10
    asserts:
      - lengthEqual:
          path: spec.rules
          count: 10
      - equal:
          path: spec.rules[0].host
          value: iap-NAMESPACE-0.example.com
      - equal:
          path: spec.rules[9].host
          value: iap-NAMESPACE-9.example.com
      - equal:
          path: spec.rules[9].http.paths[0].backend.service.name
          value: RELEASE-NAME-iap-service-headless-9

  - it: should handle unusual port numbers
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: true
          host: test.example.com
        directAccess:
          enabled: true
          baseDomain: example.com
      service:
        port: 8443
      replicaCount: 1
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 8443
      - equal:
          path: spec.rules[1].http.paths[0].backend.service.port.number
          value: 8443

  - it: Should have the expected standard annotations
    set:
      ingress:
        enabled: true
        loadBalancer:
          enabled: true
          host: test.example.com
        directAccess:
          enabled: true
          baseDomain: example.com
      service:
        port: 8443
      replicaCount: 1
    asserts:
      - hasDocuments:
          count: 1
      - exists:
          path: metadata.annotations["kubernetes.io/description"]
      - exists:
          path: metadata.annotations["itential.com/copyright"]
      - exists:
          path: metadata.annotations["itential.com/license"]
      - exists:
          path: metadata.annotations["helm.sh/template-file"]

  - it: Should allow for custom annotations
    set:
      ingress:
        enabled: true
        annotations:
          foo: "bar"
        loadBalancer:
          enabled: true
          host: test.example.com
        directAccess:
          enabled: true
          baseDomain: example.com
      service:
        port: 8443
      replicaCount: 1
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: metadata.annotations["foo"]
          value: "bar"
